# list 복습

  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
output = [[], [], []]

for number in numbers:
    output[(number + 2)%3].append(number)
    
print(output)

  >>[[1, 4, 7], [2, 5, 8], [3, 6, 9]]

# dictionary

  dictionary = {
    "name": "7D 건조 망고",
    "type": "당절임",
    "ingredient" : ["망고", "설탕", "메타중아황산나트륨", "치자황색소"],
    "origin" : "필리핀"
}

print("name:", dictionary["name"])
print("type:", dictionary["type"])
print("ingredient:", dictionary["ingredient"])
print("origin:", dictionary["origin"])
print()

dictionary["name"] = "8D 건조망고"
print("name:", dictionary["name"])
>>
  name: 7D 건조 망고
type: 당절임
ingredient: ['망고', '설탕', '메타중아황산나트륨', '치자황색소']
origin: 필리핀

name: 8D 건조망고

  # name 먼저 선언하기
name = "이름"
dict_key = {
    name: "7D 건조 망고",
    type: "당절임"
}
dict_key  
  >> {'이름': '7D 건조 망고', type: '당절임'}

# dictionary 요소 추가, 제거
  dictionary = {}

print("요소 추가 이전:", dictionary)

dictionary["name"] = "새로운 이름"
dictionary["head"] = "새로운 정신"
dictionary["body"] = "새로운 몸"

print("요소 추가 이후:", dictionary)

del dictionary["name"]

print("요소 제거 이후:", dictionary)

  >>
  요소 추가 이전: {}
요소 추가 이후: {'name': '새로운 이름', 'head': '새로운 정신', 'body': '새로운 몸'}
요소 제거 이후: {'head': '새로운 정신', 'body': '새로운 몸'}


# range()
  a = range(0, 10+1) # 0부터 10까지 표현이라는것을 강조하기 위해 +1 사용
  >> [0,1,2,3,4,5,6,7,8,9,0]

# range 함수의 매개변수로는 반드시 '정수'를 입력해야하기 때문에 int() 또는 정수나누기 연산자를 많이 사용한다
a = range(0, int(10/2))
list(a)
  >> [0, 1, 2, 3, 4]

# for 문을 사용한 range()
  for i in range(5):
    print(str(i) + "= 반복변수")
print()

for i in range(5,10):
    print(str(i) + "= 반복 변수")
print()

for i in range(0,10,3):
    print(str(i) + "= 반복 변수")
print()

  >>
0= 반복변수
1= 반복변수
2= 반복변수
3= 반복변수
4= 반복변수

5= 반복 변수
6= 반복 변수
7= 반복 변수
8= 반복 변수
9= 반복 변수

0= 반복 변수
3= 반복 변수
6= 반복 변수
9= 반복 변수

# while

  i = 0
while i < 10:
    print("{}번째 반복입니다".format(i))
    i +=1

>>
  0번째 반복입니다
1번째 반복입니다
2번째 반복입니다
3번째 반복입니다
4번째 반복입니다
5번째 반복입니다
6번째 반복입니다
7번째 반복입니다
8번째 반복입니다
9번째 반복입니다


# 반복문 # break
i = 0

while True:
    print("{}번째 반복문입니다.".format(i))
    i = i+1
    
    input_text = input(">종료하시겠습니까>(y/n): ")
    if input_text in ["y", "Y"]:
        print("반복을 종료합니다.")
        break

>>
0번째 반복문입니다.
>종료하시겠습니까>(y/n): ㅜ
1번째 반복문입니다.
>종료하시겠습니까>(y/n): ㅜ
2번째 반복문입니다.
>종료하시겠습니까>(y/n): y
반복을 종료합니다.

# continue

numbers = [5,15,6,20,7,25]

for number in numbers:
    if number < 10:    # number가 10보다 작으면 다음반복으로 넘어감
        continue
        
    print(number)

>>
15
20
25

# 반복문 reversed() # 리스트 뒤집기

numbers = [1,2,3,4,5,6]

for i in reversed(numbers):
    print("첫 번째 반복문: {}".format(i))
for i in reversed(numbers):
    print("두 번째 반복문: {}".format(i))
>>
첫 번째 반복문: 6
첫 번째 반복문: 5
첫 번째 반복문: 4
첫 번째 반복문: 3
첫 번째 반복문: 2
첫 번째 반복문: 1
두 번째 반복문: 6
두 번째 반복문: 5
두 번째 반복문: 4
두 번째 반복문: 3
두 번째 반복문: 2
두 번째 반복문: 1

# enumerate() # 현재 인덱스가 몇번째 인덱스인지 확인하기

eaxmple_list = ["요소A", "요소B", "요소C"]

print("# 단순 출력")
print("example_list")
print()

print("#enumerate() 함수 적용 출력")
print(enumerate(example_list))
print()

print("# 반복문과 조합하기")
for i, value in enumerate(example_list):
    print("{}번째 요소는 {}입니다.".format(i, value))

>>
# 단순 출력
example_list

#enumerate() 함수 적용 출력
<enumerate object at 0x0000022A172B26B0>

# 반복문과 조합하기
0번째 요소는 요소A입니다.
1번째 요소는 요소B입니다.
2번째 요소는 요소C입니다.

# 예제
exam = ["a", "b","c"]
print(list(enumerate(exam)))
>> [(0, 'a'), (1, 'b'), (2, 'c')]

# 예제, array 안에서 for문 사용하기
array = [i*i for i in range(0,20,2)]
print(array)
>> [0, 4, 16, 36, 64, 100, 144, 196, 256, 324]

# 예제, array 밖에서 for문 사용하기
array = []
for i in range(0,20,2):
    array.append(i**2)
print(array)
>> [0, 4, 16, 36, 64, 100, 144, 196, 256, 324]

# 예제, array 안 for, if
array = ["사과", "자두", "수박", "딸기", "오렌지", "초코"]
output = [fruit for fruit in array if fruit != "초코"]

print(output)
>> ['사과', '자두', '수박', '딸기', '오렌지']

# 중첩 반복문으로 피라미드 만들기
output = ""

for i in range(1,10):
    for j in range(0,i):
        output += "*"
    output +="\n"
    
print(output)
>>
*
**
***
****
*****
******
*******
********
*********

# 피라미드 2
output = ""

for i in range(1,15):              # 줄바꿈
    for j in range(14, i, -1):     # 공백
        output += " "
    for k in range(0, 2*i-1):      # 별
        output += "*"
    output+= "\n"

print(output)

>>
             *
            ***
           *****
          *******
         *********
        ***********
       *************
      ***************
     *****************
    *******************
   *********************
  ***********************
 *************************
***************************











